---
title: "Basics"
subtitle: "Getting Started With Quarto"
format:
  revealjs:
    footer: "[Hamel Husain](https://hamel.dev) | [Home](https://bit.ly/pyquarto)"
    code-line-numbers: false
    author:
      - "Hamel Husain"
    institute: "Parlance Labs"
    transition: fade
    slide-number: true
    chalkboard: false
    theme: [../style/quarto.scss, ../style/slides.scss]
---

## Create a new project (website)

::: {.fragment .fade-in-then-semi-out}

Create a new GitHub repo and clone it locally

```bash
gh repo create my-quarto-website --clone --public
```

:::

::: {.fragment .fade-in-then-semi-out}

Initialize the quarto project


```bash
quarto create project
```
:::
::: {.fragment .fade-in-then-semi-out}

or 

```bash
quarto create project website mysite
```
:::

:::aside
See [creating a website](https://quarto.org/docs/websites/)
:::

## Preview Site

::: {.fragment .fade-in-then-semi-out}
```bash
quarto preview
```
:::

::: {.fragment .fade-in-then-semi-out}
Now, try to change some contents and see what happens.
:::

::: {.fragment .fade-in-then-semi-out}
The `_site` folder contains the html files that are generated.  
You can serve this site with any web server.
:::
::: {.fragment .fade-in-then-semi-out}
For example, with Python:

```bash
python -m http.server --d _site
```
Your site will be served at localhost:8000
:::

## Look at the help!

When starting out, its helpful to look at the help for every command.

```{bash}
quarto preview --help
```

:::{.fragment .fade-in-then-semi-out}

:::{.callout-tip}
### Debugging Tips
1. Preview a single document `quarto preview somefile.qmd`
2. ` --log-level error` can help you focus on what is important
3. Delete the `_site` folder
:::

:::

## Tips for starting out

:::{.fragment .fade-in-then-semi-out}
1. **Do not** create a new site from **scratch**
:::

:::{.fragment .fade-in-then-semi-out}
2. Find a website you like, and start editing it.  It's easiest to **learn by example.**
:::

:::{.fragment .fade-in-then-semi-out}
3. One of the best examples is the **[source code](https://github.com/quarto-dev/quarto-web) for the official Quarto docs**, since they demonstrate all of the features of Quarto!
:::

:::{.fragment .fade-in-then-semi-out}
Learn to navigate the [Quarto docs](https://quarto.org/docs/) website.

:::aside
This site was created from [this repo](https://github.com/asa-quarto/website).
:::

:::

## Navigating Quarto Docs

::: columns
:::: {.column width="50%"}
```{.yaml filename="_quarto.yml"}
project:
  type: website

website:
  title: "Quarto for Python devs"
  description: "Posit::Conf 2023"
  ...

format:
  html:
    ...
  revealjs: 
    ...
```
:::

:::: {.column width="50%"}

Start with the [reference page](https://quarto.org/docs/reference/) page, where you will see:


:::{.fragment .fade-in-then-semi-out}
- [Projects](https://quarto.org/docs/reference/projects/options.html) ([`website`](https://quarto.org/docs/reference/projects/websites.html), `book` etc.)
:::

:::{.fragment .fade-in-then-semi-out}
- [Formats](https://quarto.org/docs/reference/formats/html.html) (`html`, `revealjs`, `pdf`, etc..)  

:::{.callout-tip}
Many formats have the same options and are repeated in the docs.
:::

:::

:::{.fragment .fade-in-then-semi-out}
Also see the [project guide](https://quarto.org/docs/projects/quarto-projects.html)
:::

:::
:::

## Using VSCode {.smaller}

- When authoring `_quarto.yml` or `.qmd` files, its best to use VSCode with the [Quarto extension](https://quarto.org/docs/tools/vscode.html).

- Demo this by opening the [source code](https://github.com/hamelsmu/posit-python-quarto/blob/main/3_basics/3-basics.qmd).

- Code blocks

```{python}
#|echo: true
a = 10
b = 20
```

```{python}
#|echo: true
c = a + b
```

```{python}
#|echo: true
#|output: false
import pandas as pd
pd.DataFrame({'col': [a,b,c]})
```

My Other favorite features:

- Front matter completion
- `_quarto.yml`
- relative links

And [much more](https://marketplace.visualstudio.com/items?itemName=quarto.quarto)!

## Using Notebooks

JupyterLab [extension](https://quarto.org/docs/tools/jupyter-lab-extension.html).

- Renders Quarto elements like Callouts, Divs, Mermaid, Front matter, etc. 
- The VSCode plugin is more fully featured.  Use this if you prefer JupyterLab.
- Still get code block contextual help.

Recommendation: Use VSCode Notebooks if possible (you also get CoPilot there).

## Exercise

1. Create a new Quarto website and preview it locally.
2. Edit the `_quarto.yml` file to change the title of the website.
3. Edit the `_quarto.yml` file to change the theme of the website.
4. Author a new `.qmd` file and preview it locally.
5. Author a page as a Jupyter Notebook and preview it locally.
6. Hide the code output of a code block.
7. Enable table of contents for a page.
8. Clone [the repo](https://github.com/hamelsmu/posit-python-quarto) for this tutorial and add a navbar.
